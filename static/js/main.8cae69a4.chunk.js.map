{"version":3,"sources":["component/search_bar.jsx","component/video_list_item.jsx","component/video_list.jsx","component/video_details.jsx","App.js","serviceWorker.js","index.js"],"names":["SearchBar","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","term","_this2","react_default","a","createElement","className","placeholder","onChange","e","onInputChange","target","value","setState","onSearchTermChange","Component","VideoListItem","_ref","video","onVideoSelect","console","log","imgURL","snippet","thumbnails","default","url","onClick","src","alt","title","VideoList","videos","length","videoList","map","video_list_item","key","etag","VideoDetail","videoId","id","concat","autoplay","description","App","selectedVideo","videoSearch","YTSearch","_this3","_","debounce","search_bar","video_details","video_list","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8cae69a4.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass SearchBar extends Component {\r\n  state = {};\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { term: \"\" };\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"search-bar\">\r\n        <input\r\n          placeholder=\"Search\"\r\n          onChange={e => this.onInputChange(e.target.value)}\r\n          value={this.state.term}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n  onInputChange(term) {\r\n    this.setState({ term });\r\n    this.props.onSearchTermChange(term);\r\n  }\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nfunction VideoListItem({ video, onVideoSelect }) {\r\n  console.log(video);\r\n  const imgURL = video.snippet.thumbnails.default.url;\r\n  return (\r\n    <li onClick={() => onVideoSelect(video)} className=\"list-group-item\">\r\n      <div className=\"media\">\r\n        <div className=\"video-item media-left\">\r\n          <img src={imgURL} alt=\"\" className=\"src\" />\r\n        </div>\r\n\r\n        <div className=\"media-body\">\r\n          <h6 className=\"p-3\">{video.snippet.title}</h6>\r\n        </div>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\nexport default VideoListItem;\r\n","import React from \"react\";\r\nimport VideoListItem from \"./video_list_item\";\r\n\r\nfunction VideoList(props) {\r\n  console.log(props.videos.length);\r\n\r\n  const videoList = props.videos.map(video => (\r\n    <VideoListItem\r\n      onVideoSelect={props.onVideoSelect}\r\n      key={video.etag}\r\n      video={video}\r\n    />\r\n  ));\r\n  return <ul className=\"col-md-4 list-group m-2\">{videoList}</ul>;\r\n}\r\nexport default VideoList;\r\n","import React from \"react\";\r\n\r\nfunction VideoDetail({ video }) {\r\n  console.log(\"vd:\", video);\r\n  if (!video) {\r\n    return <div>Loading...</div>;\r\n  }\r\n  const videoId = video.id.videoId;\r\n  console.log(\"VideoID\", videoId);\r\n  const url = `https://www.youtube.com/embed/${videoId}`;\r\n\r\n  return (\r\n    <div className=\"video-detail col-md-8\">\r\n      <div className=\"embed-responsive embed-responsive-16by9\">\r\n        <iframe\r\n          className=\"embed-responsive-item\"\r\n          src={url}\r\n          title={video.snippet.title}\r\n          autoplay={true}\r\n        />\r\n      </div>\r\n      <div className=\"details\">\r\n        <div>\r\n          <h6>{video.snippet.title}</h6>\r\n        </div>\r\n        <hr />\r\n        <div>{video.snippet.description}</div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\nexport default VideoDetail;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport _ from \"lodash\";\nimport SearchBar from \"./component/search_bar\";\nimport VideoList from \"./component/video_list\";\nimport YTSearch from \"youtube-api-search\";\nimport VideoDetail from \"./component/video_details\";\n\nconst API_KEY = \"AIzaSyD7N4d00l2i33JnPNL9C8AVJ_NDqctUa1I\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { videos: [], selectedVideo: null };\n    this.videoSearch(\"React js\");\n  }\n  videoSearch(term) {\n    YTSearch({ key: API_KEY, term: term }, videos =>\n      this.setState({ videos, selectedVideo: videos[0] })\n    );\n  }\n\n  render() {\n    const videoSearch = _.debounce(term => {\n      this.videoSearch(term);\n    }, 300);\n    return (\n      <div>\n        <SearchBar onSearchTermChange={videoSearch} />\n        <div className=\"d-flex flex-row \">\n          <VideoDetail video={this.state.selectedVideo} />\n          <VideoList\n            onVideoSelect={selectedVideo => this.setState({ selectedVideo })}\n            videos={this.state.videos}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}